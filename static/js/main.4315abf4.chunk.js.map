{"version":3,"sources":["../../src/components/BuildDevice.tsx","../../src/devices.ts","../../src/components/Dropdown.tsx","../../src/components/Button.tsx","../../src/components/Menu.tsx","../../src/components/MobileDevicePreview.tsx","App.tsx","index.tsx"],"names":["BuildDevice","selectedDevice","selectedColor","landscape","children","useState","rootDeviceClass","setRootDeviceClass","useEffect","color","colors","tempRootDeviceClass","mobileStyle","className","renderer","mobileDeviceStyleNodes","createElement","Array","style","convertClassNameArrayToClassName","key","index","res","devices","type","readableName","note8","iphone8","iphone8plus","iphone5s","ipad","nexus5","Dropdown","selectedItem","availableItems","updateSelectedItem","dropdown","setDropdown","dropdownStyles","width","onFocus","onClick","item","Button","updateLandscape","label","styles","capitalizeString","stringToCapitalize","Menu","allowedDevices","updateSelectedDevice","setColor","device","setDevice","availableColors","setAvailableColors","readableDevices","tempDevice","readableColors","display","justifyItems","alignItems","deviceType","preSelectedDevice","preSelectedColor","showMenu","preSelectedLandscape","setSelectedDevice","setSelectedColor","setLandscape","setPreselectedDevice","checkPreSelectedDeviceAndAllowedDevices","setPreselectedColorForDevice","possibleDevices","console","flexDirection","justifyContent","minWidth","React","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4315abf4.chunk.js","sourcesContent":["import React, {\n  createElement,\n  DetailedReactHTMLElement,\n  useEffect,\n  useState\n} from 'react'\nimport mobileStyle from '../devices.min.css'\nimport {\n  MobileDevice,\n  MobileDeviceColors,\n  MobileDeviceStyleClasses,\n  MobileDeviceStyleNode\n} from '../types'\n\ninterface IProps {\n  selectedDevice: MobileDevice\n  selectedColor: MobileDeviceColors\n  landscape: boolean\n  children: any\n}\n\nexport const BuildDevice: React.FC<IProps> = ({\n  selectedDevice,\n  selectedColor,\n  landscape,\n  children\n}: IProps) => {\n  const [rootDeviceClass, setRootDeviceClass] = useState('')\n\n  useEffect(() => {\n    const colors = selectedDevice.colors\n    const hasColor = colors.includes(selectedColor)\n    const color = hasColor ? selectedColor : 'black'\n\n    let tempRootDeviceClass = `${mobileStyle['marvel-device']}  ${\n      mobileStyle[selectedDevice.type]\n    } ${mobileStyle[color]}`\n\n    if (landscape) tempRootDeviceClass += ' ' + mobileStyle.landscape\n    setRootDeviceClass(tempRootDeviceClass)\n  }, [selectedDevice, selectedColor, landscape])\n\n  return (\n    <div className={rootDeviceClass}>\n      {renderer(selectedDevice.style, children)}\n    </div>\n  )\n}\n\nfunction renderer(\n  mobileDeviceStyleNodes: MobileDeviceStyleNode[],\n  children?: React.FC\n): DetailedReactHTMLElement<any, any>[] {\n  return mobileDeviceStyleNodes.map((style, index) => {\n    return createElement(\n      'div',\n      {\n        className: Array.isArray(style.className)\n          ? convertClassNameArrayToClassName(style.className)\n          : mobileStyle[style.className],\n        key: 'mobileStyle' + index\n      },\n      style.className === 'screen'\n        ? children\n        : style.children && renderer(style.children, children)\n    )\n  })\n}\n\nconst convertClassNameArrayToClassName = (\n  classNameArray: MobileDeviceStyleClasses[]\n) => {\n  let res = ''\n  for (const style of classNameArray) {\n    res += `${mobileStyle[style]} `\n  }\n  return res\n}\n","import { MobileDevice } from './types'\n\nexport const devices: { [id: string]: MobileDevice } = {\n  'iphone-x': {\n    type: 'iphone-x',\n    readableName: 'iPhone X',\n    colors: ['black'],\n    style: [\n      {\n        className: 'notch',\n        children: [{ className: 'camera' }, { className: 'speaker' }]\n      },\n      { className: 'top-bar' },\n      { className: 'sleep' },\n      { className: 'bottom-bar' },\n      { className: 'volume' },\n      {\n        className: 'overflow',\n        children: [\n          { className: ['shadow', 'shadow--tr'] },\n          { className: ['shadow', 'shadow--tl'] },\n          { className: ['shadow', 'shadow--br'] },\n          { className: ['shadow', 'shadow--bl'] }\n        ]\n      },\n      { className: 'inner-shadow' },\n      { className: 'screen' }\n    ]\n  },\n  note8: {\n    type: 'note8',\n    readableName: 'Note 8',\n    colors: ['black'],\n    style: [\n      { className: 'inner' },\n      { className: 'overflow', children: [{ className: 'shadow' }] },\n      { className: 'speaker' },\n      { className: 'sensors' },\n      { className: 'more-sensors' },\n      { className: 'sleep' },\n      { className: 'volume' },\n      { className: 'camera' },\n      { className: 'screen' }\n    ]\n  },\n  iphone8: {\n    type: 'iphone8',\n    readableName: 'iPhone 8',\n    colors: ['black', 'silver', 'gold'],\n    style: [\n      { className: 'top-bar' },\n      { className: 'sleep' },\n      { className: 'volume' },\n      { className: 'camera' },\n      { className: 'sensor' },\n      { className: 'speaker' },\n      { className: 'screen' },\n      { className: 'home' },\n      { className: 'bottom-bar' }\n    ]\n  },\n  iphone8plus: {\n    type: 'iphone8plus',\n    readableName: 'iPhone 8 plus',\n    colors: ['black', 'silver', 'gold'],\n    style: [\n      { className: 'top-bar' },\n      { className: 'sleep' },\n      { className: 'volume' },\n      { className: 'camera' },\n      { className: 'sensor' },\n      { className: 'speaker' },\n      { className: 'screen' },\n      { className: 'home' },\n      { className: 'bottom-bar' }\n    ]\n  },\n  iphone5s: {\n    type: 'iphone5s',\n    readableName: 'iPhone 5s',\n    colors: ['black', 'silver', 'gold'],\n    style: [\n      { className: 'top-bar' },\n      { className: 'sleep' },\n      { className: 'volume' },\n      { className: 'camera' },\n      { className: 'sensor' },\n      { className: 'speaker' },\n      { className: 'screen' },\n      { className: 'home' },\n      { className: 'bottom-bar' }\n    ]\n  },\n  ipad: {\n    type: 'ipad',\n    readableName: 'iPad mini',\n    colors: ['black', 'silver'],\n    style: [\n      { className: 'camera' },\n      { className: 'screen' },\n      { className: 'home' },\n      { className: 'bottom-bar' }\n    ]\n  },\n  nexus5: {\n    type: 'nexus5',\n    readableName: 'Nexus 5',\n    colors: ['black'],\n    style: [\n      { className: 'top-bar' },\n      { className: 'sleep' },\n      { className: 'volume' },\n      { className: 'camera' },\n      { className: 'screen' }\n    ]\n  }\n}\n","import React, { useState } from 'react'\nimport dropdownStyles from './Dropdown.css'\n\nexport interface IDropdown {\n  selectedItem: string\n  availableItems: { type: string; readableName: string }[]\n  updateSelectedItem: (selectedElement: string) => void\n}\n\nexport const Dropdown: React.FC<IDropdown> = ({\n  selectedItem,\n  availableItems,\n  updateSelectedItem\n}: IDropdown) => {\n  const [dropdown, setDropdown] = useState(false)\n\n  return (\n    <div className={dropdownStyles.dropdown} style={{ width: '200px' }} onFocus={() => setDropdown(false)}>\n      <div\n        className={dropdownStyles.button}\n        onClick={() => setDropdown(!dropdown)}\n      >\n        {selectedItem}\n      </div>\n\n      {dropdown ? (\n        <ul>\n          {availableItems.map((item, index) => {\n            return (\n              <li\n                onClick={() => {\n                  updateSelectedItem(item.type)\n                  setDropdown(!dropdown)\n                }}\n                key={item.type + index}\n              >\n                {item.readableName}\n              </li>\n            )\n          })}\n        </ul>\n      ) : null}\n    </div>\n  )\n}\n","import React from 'react'\nimport styles from './Button.css'\n\ninterface IButtonProps {\n  landscape: boolean\n  updateLandscape: (value: boolean) => void\n  label: string\n}\n\nexport const Button: React.FC<IButtonProps> = ({\n  landscape,\n  updateLandscape,\n  label\n}: IButtonProps) => {\n  return (\n    <div className={styles.button}>\n      <button onClick={() => updateLandscape(!landscape)}>{label}</button>\n    </div>\n  )\n}\n","import React, { useState } from 'react'\nimport { devices } from '../devices'\nimport { MobileDevice, MobileDeviceColors, MobileDevices } from '../types'\nimport { Dropdown } from './Dropdown'\nimport {Button} from \"./Button\";\n\ninterface IMenuProps {\n  selectedDevice: MobileDevice\n  allowedDevices?: MobileDevices[]\n  selectedColor: MobileDeviceColors\n  landscape: boolean\n  updateSelectedDevice: (\n    device: MobileDevice,\n    color: MobileDeviceColors\n  ) => void\n  updateLandscape: (value: boolean) => void\n}\n\nconst capitalizeString = (stringToCapitalize: string) => {\n  let res = ''\n  if (stringToCapitalize.length > 0)\n    res += stringToCapitalize.charAt(0).toUpperCase()\n  if (stringToCapitalize.length > 1) res += stringToCapitalize.slice(1)\n  return res\n}\n\nexport const Menu: React.FC<IMenuProps> = ({\n  selectedDevice,\n  allowedDevices,\n  landscape,\n  updateSelectedDevice,\n  updateLandscape,\n  selectedColor\n}: IMenuProps) => {\n  const [color, setColor] = useState(selectedColor)\n  const [device, setDevice] = useState(selectedDevice)\n  const [availableColors, setAvailableColors] = useState(selectedDevice.colors)\n\n  const updateColor = (color: MobileDeviceColors) => {\n    setColor(color)\n    updateSelectedDevice(device, color)\n  }\n\n  const updateDevice = (deviceType: MobileDevices) => {\n    const device = devices[deviceType]\n    setDevice(device)\n    setAvailableColors(device.colors)\n    if (!device.colors.includes(color)) setColor('black')\n    updateSelectedDevice(device, color)\n  }\n\n  const allDevices: MobileDevices[] = [\n    'iphone-x',\n    'note8',\n    'iphone8',\n    'iphone8plus',\n    'iphone5s',\n    'ipad',\n    'nexus5'\n  ]\n\n  const readableDevices = (allowedDevices || allDevices).map((device) => {\n    const tempDevice = devices[device]\n    return {\n      type: tempDevice.type,\n      readableName: tempDevice.readableName\n    }\n  })\n\n  const readableColors = availableColors.map((color) => {\n    return {\n      type: color,\n      readableName: capitalizeString(color)\n    }\n  })\n\n  return (\n    <div style={{ display: 'flex', justifyItems: 'center', alignItems: 'center' }}>\n      <Dropdown\n        selectedItem={device.readableName}\n        availableItems={readableDevices}\n        updateSelectedItem={updateDevice}\n      />\n      {availableColors && (\n        <Dropdown\n          selectedItem={capitalizeString(color)}\n          availableItems={readableColors}\n          updateSelectedItem={updateColor}\n        />\n      )}\n      <Button\n        landscape={landscape}\n        updateLandscape={updateLandscape}\n        label='Rotate'\n      />\n    </div>\n  )\n}\n","import React, { useEffect, useState } from 'react'\nimport { MobileDevice, MobileDeviceColors, MobileDevices } from '../types'\nimport { BuildDevice } from './BuildDevice'\nimport { Menu } from './Menu'\nimport { devices } from '../devices'\n\nexport interface IMobileDeviceProps {\n  allowedDevices?: MobileDevices[]\n  preSelectedDevice?: MobileDevices\n  preSelectedColor?: MobileDeviceColors\n  preSelectedLandscape?: boolean\n  showMenu?: boolean\n  children?: any\n}\n\nexport const MobileDevicePreview: React.FC<IMobileDeviceProps> = ({\n  allowedDevices,\n  preSelectedDevice,\n  preSelectedColor = 'black',\n  showMenu = true,\n  preSelectedLandscape = false,\n  children\n}: IMobileDeviceProps) => {\n  const [selectedDevice, setSelectedDevice] = useState<MobileDevice>()\n  const [selectedColor, setSelectedColor] = useState<MobileDeviceColors>(\n    'black'\n  )\n  const [landscape, setLandscape] = useState(preSelectedLandscape)\n\n  useEffect(() => {\n    setPreselectedDevice()\n  }, [])\n\n  const setPreselectedDevice = () => {\n    let device: MobileDevice\n    if (preSelectedDevice && allowedDevices && allowedDevices.length > 0) {\n      device = checkPreSelectedDeviceAndAllowedDevices(\n        preSelectedDevice,\n        allowedDevices\n      )\n    } else if (preSelectedDevice) {\n      device = devices[preSelectedDevice]\n    } else if (allowedDevices && allowedDevices.length > 0) {\n      device = devices[allowedDevices[0]]\n    } else {\n      device = devices['iphone-x']\n    }\n    setPreselectedColorForDevice(device)\n    setSelectedDevice(device || devices['iphone-x'])\n  }\n\n  const checkPreSelectedDeviceAndAllowedDevices = (\n    device: MobileDevices,\n    possibleDevices: MobileDevices[]\n  ) => {\n    if (device && possibleDevices.includes(device)) {\n      return devices[device]\n    } else {\n      console.error(\n        'The preselected device was not included in the allowedDevices. Defaulting to the first allowed device'\n      )\n      return devices[possibleDevices[0]]\n    }\n  }\n\n  const setPreselectedColorForDevice = (device: MobileDevice) => {\n    if (preSelectedColor && !device.colors.includes(preSelectedColor)) {\n      console.error(\n        `Color ${preSelectedColor} can't be chosen for device ${device.readableName}`\n      )\n      setSelectedColor('black')\n    } else if (preSelectedColor && device.colors.includes(preSelectedColor)) {\n      setSelectedColor(preSelectedColor)\n    } else {\n      setSelectedColor('black')\n    }\n  }\n\n  const updateSelectedDevice = (\n    updatedDevice: MobileDevice,\n    updatedColor: MobileDeviceColors\n  ) => {\n    setSelectedDevice(updatedDevice)\n    setSelectedColor(updatedColor)\n  }\n\n  return selectedDevice ? (\n    <div\n      style={{\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        alignItems: 'center',\n        minWidth: 'min-content'\n      }}\n    >\n      {showMenu && (\n        <Menu\n          selectedDevice={selectedDevice}\n          selectedColor={selectedColor}\n          allowedDevices={allowedDevices}\n          landscape={landscape}\n          updateLandscape={setLandscape}\n          updateSelectedDevice={updateSelectedDevice}\n        />\n      )}\n      <BuildDevice\n        selectedDevice={selectedDevice}\n        selectedColor={selectedColor}\n        landscape={landscape}\n      >\n        {children}\n      </BuildDevice>\n    </div>\n  ) : (\n    <div>Something strange happened</div>\n  )\n}\n","import React from 'react'\n\nimport MobileDevicePreview from 'sanity-mobile-preview'\nimport 'sanity-mobile-preview/dist/index.css'\n\nconst App = () => {\n  return <MobileDevicePreview preSelectedDevice={\"ipad\"} preSelectedColor={\"silver\"} preSelectedLandscape={true} >\n    <div style={{ display: 'flex', justifyContent: 'center' }}> This is a demo 🤠</div>\n  </MobileDevicePreview>\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}
{"version":3,"sources":["../../src/components/BuildDevice.tsx","../../src/devices.ts","../../src/components/Dropdown.tsx","../../src/components/Menu.tsx","../../src/components/MobileDevicePreview.tsx","App.tsx","index.tsx"],"names":["BuildDevice","children","color","selectedDevice","colors","selectedColor","rootDeviceClass","mobileStyle","className","renderer","mobileDeviceStyleNodes","style","createElement","key","devices","type","readableName","note8","iphone8","iphone8plus","iphone5s","ipad","nexus5","Dropdown","updateSelectedItem","useState","dropdownStyles","width","onFocus","setDropdown","onClick","dropdown","availableItems","item","index","capitalizeString","stringToCapitalize","res","Menu","readableDevices","allowedDevices","device","tempDevice","readableColors","availableColors","display","justifyItems","selectedItem","deviceType","setDevice","setAvailableColors","setColor","updateSelectedDevice","MobileDevicePreview","preSelectedColor","showMenu","useEffect","setPreselectedDevice","preSelectedDevice","checkPreSelectedDeviceAndAllowedDevices","setPreselectedColorForDevice","setSelectedDevice","possibleDevices","console","setSelectedColor","flexDirection","justifyContent","alignItems","minHeight","landscape","React","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.09f3577d.chunk.js","sourcesContent":["import React, { createElement, DetailedReactHTMLElement } from 'react'\nimport mobileStyle from '../devices.min.css'\nimport {\n  MobileDevice,\n  MobileDeviceColors,\n  MobileDeviceStyleNode\n} from '../index'\n\ninterface IProps {\n  selectedDevice: MobileDevice\n  selectedColor: MobileDeviceColors\n  landscape: boolean\n  children: any\n}\n\nexport const BuildDevice: React.FC<IProps> = ({\n  selectedDevice,\n  selectedColor,\n  landscape,\n  children\n}: IProps) => {\n  const colors = selectedDevice.colors\n  const hasColor = colors.includes(selectedColor)\n  const color = hasColor ? selectedColor : 'black'\n\n  let rootDeviceClass = `${mobileStyle['marvel-device']}  ${\n    mobileStyle[selectedDevice.type]\n  } ${mobileStyle[color]}`\n\n  if (landscape) rootDeviceClass += ' ' + mobileStyle[rootDeviceClass]\n\n  return (\n    <div className={rootDeviceClass}>\n      {renderer(selectedDevice.style, children)}\n    </div>\n  )\n}\n\nfunction renderer(\n  mobileDeviceStyleNodes: MobileDeviceStyleNode[],\n  children?: React.FC\n): DetailedReactHTMLElement<any, any>[] {\n  return mobileDeviceStyleNodes.map((style) => {\n    return createElement(\n      'div',\n      {\n        className: mobileStyle[style.className as string],\n        key: style.className as string\n      },\n      style.className === 'screen'\n        ? children\n        : style.children && renderer(style.children, children)\n    )\n  })\n}\n","import { MobileDevice } from './index'\n\nexport const devices: { [id: string]: MobileDevice } = {\n  'iphone-x': {\n    type: 'iphone-x',\n    readableName: 'iPhone X',\n    colors: ['black'],\n    style: [\n      {\n        className: 'notch',\n        children: [{ className: 'camera' }, { className: 'speaker' }]\n      },\n      { className: 'top-bar' },\n      { className: 'sleep' },\n      { className: 'bottom-bar' },\n      { className: 'volume' },\n      {\n        className: 'overflow',\n        children: [\n          { className: ['shadow', 'shadow--tr'] },\n          { className: ['shadow', 'shadow--tl'] },\n          { className: ['shadow', 'shadow--br'] },\n          { className: ['shadow', 'shadow--bl'] }\n        ]\n      },\n      { className: 'inner-shadow' },\n      { className: 'screen' }\n    ]\n  },\n  note8: {\n    type: 'note8',\n    readableName: 'Note 8',\n    colors: ['black'],\n    style: [\n      { className: 'inner' },\n      { className: 'overflow', children: [{ className: 'shadow' }] },\n      { className: 'speaker' },\n      { className: 'sensors' },\n      { className: 'more-sensors' },\n      { className: 'sleep' },\n      { className: 'volume' },\n      { className: 'camera' },\n      { className: 'screen' }\n    ]\n  },\n  iphone8: {\n    type: 'iphone8',\n    readableName: 'iPhone 8',\n    colors: ['black', 'silver', 'gold'],\n    style: [\n      { className: 'top-bar' },\n      { className: 'sleep' },\n      { className: 'volume' },\n      { className: 'camera' },\n      { className: 'sensor' },\n      { className: 'speaker' },\n      { className: 'screen' },\n      { className: 'home' },\n      { className: 'bottom-bar' }\n    ]\n  },\n  iphone8plus: {\n    type: 'iphone8plus',\n    readableName: 'iPhone 8 plus',\n    colors: ['black', 'silver', 'gold'],\n    style: [\n      { className: 'top-bar' },\n      { className: 'sleep' },\n      { className: 'volume' },\n      { className: 'camera' },\n      { className: 'sensor' },\n      { className: 'speaker' },\n      { className: 'screen' },\n      { className: 'home' },\n      { className: 'bottom-bar' }\n    ]\n  },\n  iphone5s: {\n    type: 'iphone5s',\n    readableName: 'iPhone 5s',\n    colors: ['black', 'silver', 'gold'],\n    style: [\n      { className: 'top-bar' },\n      { className: 'sleep' },\n      { className: 'volume' },\n      { className: 'camera' },\n      { className: 'sensor' },\n      { className: 'speaker' },\n      { className: 'screen' },\n      { className: 'home' },\n      { className: 'bottom-bar' }\n    ]\n  },\n  ipad: {\n    type: 'ipad',\n    readableName: 'iPad mini',\n    colors: ['black', 'silver'],\n    style: [\n      { className: 'camera' },\n      { className: 'screen' },\n      { className: 'home' },\n      { className: 'bottom-bar' }\n    ]\n  },\n  nexus5: {\n    type: 'nexus5',\n    readableName: 'Nexus 5',\n    colors: ['black'],\n    style: [\n      { className: 'top-bar' },\n      { className: 'sleep' },\n      { className: 'volume' },\n      { className: 'camera' },\n      { className: 'screen' }\n    ]\n  }\n}\n","import React, { useState } from 'react'\nimport dropdownStyles from './Dropdown.css'\n\nexport interface IDropdown {\n  selectedItem: string\n  availableItems: { type: string; readableName: string }[]\n  updateSelectedItem: (selectedElement: string) => void\n}\n\nexport const Dropdown: React.FC<IDropdown> = ({\n  selectedItem,\n  availableItems,\n  updateSelectedItem\n}: IDropdown) => {\n  const [dropdown, setDropdown] = useState(false)\n\n  return (\n    <div className={dropdownStyles.dropdown} style={{ width: '200px' }} onFocus={() => setDropdown(false)}>\n      <div\n        className={dropdownStyles.button}\n        onClick={() => setDropdown(!dropdown)}\n      >\n        {selectedItem}\n      </div>\n\n      {dropdown ? (\n        <ul>\n          {availableItems.map((item, index) => {\n            return (\n              <li\n                onClick={() => {\n                  updateSelectedItem(item.type)\n                  setDropdown(!dropdown)\n                }}\n                key={item.type + index}\n              >\n                {item.readableName}\n              </li>\n            )\n          })}\n        </ul>\n      ) : null}\n    </div>\n  )\n}\n","import React, { useState } from 'react'\nimport { devices } from '../devices'\nimport { MobileDevice, MobileDeviceColors, MobileDevices } from '../index'\nimport { Dropdown } from './Dropdown'\n\ninterface IMenuProps {\n  selectedDevice: MobileDevice\n  allowedDevices?: MobileDevices[]\n  selectedColor: MobileDeviceColors\n  updateSelectedDevice: (\n    device: MobileDevice,\n    color: MobileDeviceColors\n  ) => void\n}\n\nconst capitalizeString = (stringToCapitalize: string) => {\n  let res = ''\n  if (stringToCapitalize.length > 0)\n    res += stringToCapitalize.charAt(0).toUpperCase()\n  if (stringToCapitalize.length > 1) res += stringToCapitalize.slice(1)\n  return res\n}\n\nexport const Menu: React.FC<IMenuProps> = ({\n  selectedDevice,\n  allowedDevices,\n  updateSelectedDevice,\n  selectedColor\n}: IMenuProps) => {\n  const [color, setColor] = useState(selectedColor)\n  const [device, setDevice] = useState(selectedDevice)\n  const [availableColors, setAvailableColors] = useState(selectedDevice.colors)\n\n  const updateColor = (color: MobileDeviceColors) => {\n    setColor(color)\n    updateSelectedDevice(device, color)\n  }\n\n  const updateDevice = (deviceType: MobileDevices) => {\n    const device = devices[deviceType]\n    setDevice(device)\n    setAvailableColors(device.colors)\n    if (!device.colors.includes(color)) setColor('black')\n    updateSelectedDevice(device, color)\n  }\n\n  const allDevices: MobileDevices[] = [\n    'iphone-x',\n    'note8',\n    'iphone8',\n    'iphone8plus',\n    'iphone5s',\n    'ipad',\n    'nexus5'\n  ]\n\n  const readableDevices = (allowedDevices || allDevices).map((device) => {\n    const tempDevice = devices[device]\n    return {\n      type: tempDevice.type,\n      readableName: tempDevice.readableName\n    }\n  })\n\n  const readableColors = availableColors.map((color) => {\n    return {\n      type: color,\n      readableName: capitalizeString(color)\n    }\n  })\n\n  return (\n    <div style={{ display: 'flex', justifyItems: 'center' }}>\n      <Dropdown\n        selectedItem={device.readableName}\n        availableItems={readableDevices}\n        updateSelectedItem={updateDevice}\n      />\n      {availableColors && (\n        <Dropdown\n          selectedItem={capitalizeString(color)}\n          availableItems={readableColors}\n          updateSelectedItem={updateColor}\n        />\n      )}\n    </div>\n  )\n}\n","import React, { useEffect, useState } from 'react'\nimport { MobileDevice, MobileDeviceColors, MobileDevices } from '../index'\nimport { BuildDevice } from './BuildDevice'\nimport { Menu } from './Menu'\nimport { devices } from '../devices'\n\nexport interface IMobileDeviceProps {\n  allowedDevices?: MobileDevices[]\n  preSelectedDevice?: MobileDevices\n  preSelectedColor?: MobileDeviceColors\n  showMenu?: boolean\n  children?: any\n}\n\nexport const MobileDevicePreview: React.FC<IMobileDeviceProps> = ({\n  allowedDevices,\n  preSelectedDevice,\n  preSelectedColor = 'black',\n  showMenu = true,\n  children\n}: IMobileDeviceProps) => {\n  const [selectedDevice, setSelectedDevice] = useState<MobileDevice>()\n  const [selectedColor, setSelectedColor] = useState<MobileDeviceColors>(\n    'black'\n  )\n\n  useEffect(() => {\n    setPreselectedDevice()\n  }, [])\n\n  const setPreselectedDevice = () => {\n    let device: MobileDevice\n    if (preSelectedDevice && allowedDevices && allowedDevices.length > 0) {\n      device = checkPreSelectedDeviceAndAllowedDevices(\n        preSelectedDevice,\n        allowedDevices\n      )\n    } else if (preSelectedDevice) {\n      device = devices[preSelectedDevice]\n    } else if (allowedDevices && allowedDevices.length > 0) {\n      device = devices[allowedDevices[0]]\n    } else {\n      device = devices['iphone-x']\n    }\n    setPreselectedColorForDevice(device)\n    setSelectedDevice(device || devices['iphone-x'])\n  }\n\n  const checkPreSelectedDeviceAndAllowedDevices = (\n    device: MobileDevices,\n    possibleDevices: MobileDevices[]\n  ) => {\n    if (device && possibleDevices.includes(device)) {\n      return devices[device]\n    } else {\n      console.error(\n        'The preselected device was not included in the allowedDevices. Defaulting to the first allowed device'\n      )\n      return devices[possibleDevices[0]]\n    }\n  }\n\n  const setPreselectedColorForDevice = (device: MobileDevice) => {\n    if (device.colors.includes(preSelectedColor)) {\n      setSelectedColor(preSelectedColor)\n    } else {\n      console.error(\n        `Color ${preSelectedColor} can't be chosen for device ${device.readableName}`\n      )\n      setSelectedColor('black')\n    }\n  }\n\n  const updateSelectedDevice = (\n    updatedDevice: MobileDevice,\n    updatedColor: MobileDeviceColors\n  ) => {\n    setSelectedDevice(updatedDevice)\n    setSelectedColor(updatedColor)\n  }\n\n  return selectedDevice ? (\n    <div\n      style={{\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        alignItems: 'center',\n        minHeight: '200px'\n      }}\n    >\n      {showMenu && (\n        <Menu\n          selectedDevice={selectedDevice}\n          selectedColor={selectedColor}\n          allowedDevices={allowedDevices}\n          updateSelectedDevice={updateSelectedDevice}\n        />\n      )}\n      <BuildDevice\n        selectedDevice={selectedDevice}\n        selectedColor={selectedColor}\n        landscape={false}\n      >\n        {children}\n      </BuildDevice>\n    </div>\n  ) : (\n    <div>Something strange happened</div>\n  )\n}\n","import React from 'react'\n\nimport { MobileDevicePreview } from 'sanity-mobile-preview'\nimport 'sanity-mobile-preview/dist/index.css'\n\nconst App = () => {\n  return <MobileDevicePreview preSelectedDevice={\"ipad\"} preSelectedColor={\"silver\"} >\n    <div>Hello</div>\n  </MobileDevicePreview>\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}